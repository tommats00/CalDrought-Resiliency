---
title: "Dashboard Visualizations"
author: "Tom Gibbens-Matsuyama"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

### Load Libraries
```{r}
library(tidyverse)
library(here)
library(ggExtra)
```

### Load data
```{r}
# Metric data
water_shortage <- read_csv(here("data", "actual_water_shortage_level.csv"))
five_year_shortage <- read_csv(here("data", "five_year_water_shortage_outlook.csv"))
historical_production <- read_csv(here("data", "historical_production_delivery.csv"))
monthly_water_shortage <- read_csv(here("data", "monthly_water_shortage_outlook.csv"))
source_name <- read_csv(here("data", "source_name.csv"))
population <- read_csv(here("data", "population_clean.csv"))
```


## Five year shortage dataframe

#### Filter to Goleta Water District
All of the visualizations will be for the Goleta water district (org_id = 1068)

```{r}
five_year_goleta <- five_year_shortage %>% 
  filter(org_id == 1068) %>% 
  
  # Combining use, supply, aug, red into one column 
  pivot_longer(cols = c(starts_with("water"), starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet")

# Renaming & reordering the observations for plot & table outputs
five_year_goleta$use_supply_aug_red <- factor(five_year_goleta$use_supply_aug_red,
                                              levels = c("water_supplies_acre_feet", # reordering observations
                                                         "water_use_acre_feet",
                                                         "benefit_supply_augmentation_acre_feet",
                                                         "benefit_demand_reduction_acre_feet"),
                                              labels = c("Supply", "Use",  # renaming observations
                                                         "Supply Augmentation", "Demand Reduction")) 
```

#### Bar chart
```{r}

# Plot based on date and acre feet
ggplot(five_year_goleta, aes(x = forecast_start_date, y = acre_feet, fill = use_supply_aug_red)) +
  geom_col(position = "dodge") +
  labs(x = "Forecast Date",
       y = "Acre-Feet",
       fill = element_blank()) +
  #scale_fill_discrete(labels = c("Supply", "Use", "Supply Augmentation", "Demand Reduction")) +
  scale_fill_manual(values = c("coral", "steelblue", "forestgreen", "violetred")) + 
  theme_minimal()
```

#### NA values

```{r}
# Calculate NAs for the dashboard
five_year_goleta %>% 
  group_by(use_supply_aug_red) %>%  # grouping by metric we are interested in
  
  # Calculate total rows, total NAs, then its percentage 
  summarize(total_obs = n(),  
            total_na = sum(is.na(acre_feet)),
            na_percentage = total_na / total_obs * 100)
```

#### Total Values
```{r}
# Calculate total values for dashboard
five_year_goleta %>% 
  group_by(use_supply_aug_red) %>% 
  summarize(total_value = sum(acre_feet))
```






## Historical Production

### Filter to Goleta Water District (org_id = 1068)
```{r}
# Filter original data to Goleta Water District 
hist_goleta <- historical_production %>% 
  filter(org_id == 1068) 

# Reassign the dataframe for new row, "total", calculation
hist_goleta <- hist_goleta %>%   
  group_by(start_date) %>% 
  
  # Append a new row for each start_date & produced_delivered calculating the "total" 
  bind_rows(
    hist_goleta %>% 
      group_by(start_date, water_produced_or_delivered) %>% 
      
      # Summarize is producing a new total row by the group by above 
      summarize(water_type = "total",
                quantity_acre_feet = sum(quantity_acre_feet, na.rm = TRUE),
                
                # Using unique returns the "original" observation, these aren't being changed 
                start_date = unique(start_date),
                end_date = unique(end_date),
                pwsid = unique(pwsid),
                water_system_name = unique(water_system_name),
                org_id = unique(org_id))
  ) %>% 
  ungroup()
```

### Line plot time series for total 

```{r}
hist_goleta %>% 
  filter(water_type == "total") %>% 

ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_produced_or_delivered)) +
  geom_line() +
  labs(x = "Date",
       y = "Quantity (Acre-Feet)") +
  theme_minimal()
```

### Line plot time series for specific water type

```{r}
# Filtered to these randomly picked water types
hist_goleta %>% 
  filter(water_type %in% c("agriculture", "commercial/institutional", "groundwater wells", "other")) %>% 
  
  # Plot, color by water type, and linetype by produced or delivered 
  ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_type, linetype = water_produced_or_delivered)) +
  geom_line() +
  labs(x = "Date",
       y = "Quantity (Acre-Feet)") +
  theme_minimal()
```


### NA values for all produced/delivered NEED TO TAKE OUT 'TOTAL' FOR CALCULATION B/C IT WAS ADDED TO DF

```{r}
# Calculating NAs 
hist_goleta_na <- hist_goleta %>% 
  
  # Filter out total b/c we created this, not a part of the original data
  # Don't want to include it in our calculation 
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered) %>% 
  
  # Calculate total observations, total NAs, and NA percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(quantity_acre_feet)),
            na_percentage = total_na / total_obs * 100)
```


### Total values for all produced/delivered

```{r}
# Calculating total values for "total produced/delivered"
hist_goleta_values <- hist_goleta %>% 
  
  # Filter out "total" as its not a part of the original data
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered) %>% 
  
  # Summing quantity acre-feet for total 
  summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE))
```

### Total Values for Specific water type
THIS GIVES ME THE TOTAL VALUES FOR EACH WATER TYPE FOR EVERY YEAR. THE GOAL IS WHEN WE CHANGE THE DATE RANGE, THESE VALUES WILL CHANGE WITH IT
```{r}
# Calculating values for specific water types chosen above 
hist_goleta_values2 <- hist_goleta %>% 
  
  # Filter out "total" as it's not a part of the original data
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered, water_type) %>% 
  
  # Calculating totals and then filtered to chosen water types 
  summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE)) %>% 
  filter(water_type %in% c("agriculture", "commercial/institutional", "groundwater wells", "other"))
```





## Monthly Water Shortage DF

#### Filter to Alameda, WE DON'T HAVE GOLETA WATER DISTRICT IN THIS DATASET
```{r}
# Filter to Alameda 
monthly_alameda <- monthly_water_shortage %>% 
  filter(org_id == 23)
```

### Bar plot for shortage percentage

```{r}
monthly_alameda %>% 
  
  # Filter out annual reports, interested in monthly metrics
  filter(is_annual == "FALSE") %>%
  
  # Pivot longer shortage surplus, benefit demand reduction and benefit supply aug columns
  # Want information in one column for easier access when plotting
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Plot data 
  ggplot(aes(x = forecast_start_date, y = acre_feet, fill = use_supply_aug_red)) + 
  geom_col(position = "dodge") +
  labs(x = "Date",
       y = "Acre-Feet",
       fill = element_blank()) +
  
  # Changing labels for graph representation 
  scale_fill_discrete(labels = c("Demand Reduction", "Supply Augmentation", "Shortage/Surplus")) +
  theme_minimal()
  
```

### Total NA values for Short/Sur, Reduction, Supply Aug

```{r}
# Calculate alameda NAs for dashboard 
monthly_alameda_na <- monthly_alameda %>% 
  
  # Pivoting columns for easier computation 
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Group by new pivoted column 
  group_by(use_supply_aug_red) %>% 
  
  # Summarizing total observations, total NAs, and NA percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(acre_feet)),
            na_percentage = total_na / total_obs * 100)
```

### Total values for Short/sur, reduction, supply aug

```{r}

# Calculate total values 
monthly_alameda_values <- monthly_alameda %>% 
  
  # Pivot columns for easier computation 
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Group by new column and summarize total acre-feet
  group_by(use_supply_aug_red) %>% 
  summarize(total = sum(acre_feet, na.rm = TRUE))

```




## Actual Water Shortage Level DF

#### Filter to Goleta
```{r}
# Filter water shortage to Goleta 
shortage_goleta <- water_shortage %>% 
  filter(org_id == 1068) %>% 
  
  # Create month and year columns 
  mutate(month = month(start_date),
         year = year(start_date)) %>% 
  
  # Filter to only 2022 for our Dashboard Mockup, need to change for function making 
  filter(year == 2022)
```

#### Bar Plot of shortage

```{r}
# Plot Water shortage levels for Goleta 
ggplot(shortage_goleta, aes(x = month, y = state_standard_shortage_level)) +
  geom_col(fill = "orange3") +
  scale_x_continuous(
    
    # Create breaks for 12 months
    breaks = 1:12, 
    
    # Change labels from numbers into month abbreviations
    labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
               "July", "Aug", "Sep", "Oct", "Nov", "Dec")) +
  
  labs(x = "Month",
       y = "Shortage Level") +
  theme_minimal()
```

```{r}

##### THIS IS IF WE DO A DOT PLOT, NEED TO MAKE CHANGES AND DESIGNATE COLORS FOR LEVELS ######
ggplot(shortage_goleta, aes(x = month, y = state_standard_shortage_level)) +
  geom_point() +
  scale_x_continuous(
    breaks = 1:12,
    labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
               "July", "Aug", "Sep", "Oct", "Nov", "Dec")
  ) +
  labs(x = "Month",
       y = "Shortage Level") +
  theme_minimal()
```



### NAs for shortage

```{r}
# Calculating water shortage level NAs
shortage_goleta_na <- shortage_goleta %>% 
  
  # Summarize total observations, total NAs, NA Percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(state_standard_shortage_level)),
            na_percentage = total_na / total_obs * 100)
```

### Average Values for shortage

```{r}
# Calculating total values
shortage_goleta_values <- shortage_goleta %>% 
  summarize(average = mean(state_standard_shortage_level, na.rm = TRUE))
```
