---
title: "Dashboard Visualizations"
author: "Tom Gibbens-Matsuyama"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

### Load Libraries

```{r}
library(tidyverse)
library(here)
library(ggExtra)
```

### Load data

```{r}
# Metric data
actual_shortage <- read_csv(here("data", "actual_water_shortage_level.csv"))
five_year_outlook <- read_csv(here("data", "five_year_water_shortage_outlook.csv"))
historical_production <- read_csv(here("data", "historical_production_delivery.csv"))
monthly_water_outlook <- read_csv(here("data", "monthly_water_shortage_outlook.csv"))
source_name <- read_csv(here("data", "source_name.csv"))
# population <- read_csv(here("data", "population_clean.csv"))
```

## Five year shortage dataframe

#### Filter to Goleta Water District

All of the visualizations will be for the Goleta water district (org_id = 1068)

```{r}
five_year_goleta <- five_year_outlook %>% 
  filter(org_id == 1068) %>% 
  
  # Combining use, supply, aug, red into one column 
  pivot_longer(cols = c(starts_with("water"), starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet")

# Renaming & reordering the observations for plot & table outputs
five_year_goleta$use_supply_aug_red <- factor(five_year_goleta$use_supply_aug_red,
                                              levels = c("water_supplies_acre_feet", # reordering observations
                                                         "water_use_acre_feet",
                                                         "benefit_supply_augmentation_acre_feet",
                                                         "benefit_demand_reduction_acre_feet"),
                                              labels = c("Supply", "Use",  # renaming observations
                                                         "Supply Augmentation", "Demand Reduction")) 
```

### Function for 5 Year Filter

```{r}
five_filter_function <- function(id, year) {
  
  # Create filtered df from original
  five_year_filter <- five_year_outlook %>% 
  
  # Filter data to specific org_id
  filter(org_id == id) %>%
    
    mutate(forecast_year = year(forecast_start_date)) %>% 
    
    filter(forecast_year %in% year) %>% 
    
    # Combining use, supply, augmentation, reduction into one columns
    pivot_longer(cols = c(starts_with("water"), starts_with("benefit")),
                 names_to = "use_supply_aug_red",
                 values_to = "acre_feet")
  
  # Renaming & reordering the observations for the plot & table outputs
  five_year_filter$use_supply_aug_red <- factor(five_year_filter$use_supply_aug_red,
                                                levels = c("water_supplies_acre_feet", # reordering observations
                                                         "water_use_acre_feet",
                                                         "benefit_supply_augmentation_acre_feet",
                                                         "benefit_demand_reduction_acre_feet"),
                                              labels = c("Supply", "Use",  # renaming observations
                                                         "Supply Augmentation", "Demand Reduction")) 
  
  return(five_year_filter)
}

# Example
View(five_filter_function(1068, c(2021, 2023)))
```

### Function for Five Year Bar Plot

```{r}
five_year_plot <- function(id, year) {
  
  # Using five_filter_function for pre-filtered data
  filtered_data <- five_filter_function(id, year)
  
  # Generate the ggplot
  ggplot(filtered_data, aes(x = forecast_year, y = acre_feet, fill = use_supply_aug_red)) +
    
    # Geom col for a bar plot 
    geom_col(position = "dodge") + # dodge lines up bars side by side
    
    # Labels
    labs(x = "Forecast Date",
         y = "Acre-Feet",
         fill = element_blank()) + # Get's rid of the legend
    
    # Add axis breaks
    scale_x_continuous(breaks = c(2021:2025)) +
    
    # Manually choose bar colors   
    scale_fill_manual(values = c("coral", "steelblue", "forestgreen", "violetred")) + 
    theme_minimal()
  
  
}

# Example
five_year_plot(1068, c(2021:2024))
```

#### Bar chart

```{r}

# Plot based on date and acre feet
ggplot(five_year_goleta, aes(x = forecast_start_date, y = acre_feet, fill = use_supply_aug_red)) +
  geom_col(position = "dodge") +
  labs(x = "Forecast Date",
       y = "Acre-Feet",
       fill = element_blank()) +
  #scale_fill_discrete(labels = c("Supply", "Use", "Supply Augmentation", "Demand Reduction")) +
  scale_fill_manual(values = c("coral", "steelblue", "forestgreen", "violetred")) + 
  theme_minimal()
```

### Function for NA values

```{r}
five_na_function <- function(id, year){
  
  # Use filtered data
  five_year_na <- five_filter_function(id, year)

  # Calculate NAs
  five_year_na %>% 
    
    # Group by the four metrics we are interested in
    group_by(use_supply_aug_red) %>% 
    
    # Calculate total rows, total NAs, percentage
    summarize(total_obs = n(),
              total_na = sum(is.na(acre_feet)),
              na_percentage = total_na / total_obs * 100)

}

# Example
five_na_function(1068, c(2021:2022))
```

#### NA values

```{r}
# Calculate NAs for the dashboard
five_year_goleta %>% 
  group_by(use_supply_aug_red) %>%  # grouping by metric we are interested in
  
  # Calculate total rows, total NAs, then its percentage 
  summarize(total_obs = n(),  
            total_na = sum(is.na(acre_feet)),
            na_percentage = total_na / total_obs * 100)
```

### Function for total Values

```{r}
five_values_function <- function(id, year){
  
  # Use filtered data
  five_values <- five_filter_function(id, year)
  
  five_values %>% 
    
    # Group metrics we are interested in 
    group_by(use_supply_aug_red) %>% 
    
    # Summarize there total acre_feet 
    summarize(total_value = sum(acre_feet))
  
}

# Example
five_values_function(1068, c(2021:2022))
```

#### Total Values

```{r}
# Calculate total values for dashboard
five_year_goleta %>% 
  group_by(use_supply_aug_red) %>% 
  summarize(total_value = sum(acre_feet))
```

## Historical Production

### Filter to Goleta Water District (org_id = 1068)

Each time I run this, it adds to the newly calculated total column, the function is working fine I think tho

```{r}
# Filter original data to Goleta Water District 
hist_goleta <- historical_production %>% 
  filter(org_id == 1068) %>% 
  
  mutate(year_month = format(start_date, "%Y-%m")) %>% 

  group_by(start_date) %>% 
  
  # Append a new row for each start_date & produced_delivered calculating the "total" 
  bind_rows(
    hist_goleta %>% 
      group_by(start_date, water_produced_or_delivered) %>% 
      
      # Summarize is producing a new total row by the group by above 
      summarize(water_type = "total",
                quantity_acre_feet = sum(quantity_acre_feet, na.rm = TRUE),
                
                # Using unique returns the "original" observation, these aren't being changed 
                start_date = unique(start_date),
                end_date = unique(end_date),
                pwsid = unique(pwsid),
                water_system_name = unique(water_system_name),
                org_id = unique(org_id),
                year_month = unique(year_month))
  ) %>% 
  ungroup() %>% 
  filter(year_month %in% c("2013-01", "2013-02", "2013-03", "2013-04", "2013-05"))
```

### Function for historical production filtering

This seems to be working fine. Using org_id and date as the arguments.

```{r}
hist_filt_function <- function(id, date){
  
    # If date arguemnt has 2 values, assume it's a start/end range and expand it
  if (length(date) == 2) {
    date <- seq(
      from = lubridate::ymd(paste0(date[1], "-01")), # converts into a Date type
      
      to   = lubridate::ymd(paste0(date[2], "-01")), # converts into a Date type
      
      by   = "1 month" # sequences by month
      
    ) %>% format("%Y-%m") # formats back into Year and month, same as input values
  }
  
  # Start of historical production filtering
  hist_filter <- historical_production %>% 
    
    # filter to org_id
    filter(org_id == id) %>% 
    
    # Create new forecast year column
    mutate(year_month = format(start_date, "%Y-%m"))  
    
  hist_total <- hist_filter %>% 
    # Group by date 
    group_by(start_date) %>% 
    
    # Append a new row for each start_date & produced_delivered calculating the "total" 
    bind_rows(
      hist_filter %>% 
        group_by(start_date, water_produced_or_delivered) %>% 
        
        # Summarize is producing a new total row by the group by above 
        summarize(water_type = "total",
                  quantity_acre_feet = sum(quantity_acre_feet, na.rm = TRUE),
                  
                  # Using unique returns the "original" observation of these columns,
                  # These are not being changed 
                  start_date = unique(start_date),
                  end_date = unique(end_date),
                  pwsid = unique(pwsid),
                  water_system_name = unique(water_system_name),
                  org_id = unique(org_id),
                  year_month = unique(year_month),
                  .groups = "drop_last")
    ) %>% 
    ungroup() %>% 
    # Filter for a given year range
    filter(year_month %in% date)
} 

View(hist_filt_function(1068, date = c("2013-01", "2013-06")))
```

### Line plot time series for total

```{r}
hist_goleta %>% 
  filter(water_type == "total") %>% 

ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_produced_or_delivered)) +
  geom_line() +
  labs(x = "Date",
       y = "Quantity (Acre-Feet)") +
  theme_minimal()
```

### Function for creating historical production line plot

```{r}

hist_plot_all_function <- function(id, type, date){
  
  # Use filtered historical production data
  hist_plot <- hist_filt_function(id, date) %>% 
    
    # filter for water type
    filter(water_type == type) %>% 
    
    # Plot filtered data 
    ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_produced_or_delivered)) +
    geom_line() +
    labs(x = "Date",
         y = "Quantity (Acre-Feet)") +
    theme_minimal()
  
  return(hist_plot)
}

# Example function output
hist_plot_all_function(1068, "total", c("2013-01", "2013-06"))
```

### Function for all historical production data for all water types

```{r}
hist_plot_function <- function(id, type, date){
  
  # Use filtered historical production data
  hist_plot <- hist_filt_function(id, date ) %>% 
    
    # filter for water type
    filter(water_type %in% type) %>% 
    
    # Plot filtered data 
    ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_type, linetype = water_produced_or_delivered)) +
    geom_line() +
    labs(x = "Date",
         y = "Quantity (Acre-Feet)") +
    theme_minimal()
  
  return(hist_plot)
}

# Example function output
hist_plot_function(1068, c("total", "agriculture"), c("2013-01", "2013-06"))
```

### Line plot time series for specific water type

```{r}
# Filtered to these randomly picked water types
hist_goleta %>% 
  filter(water_type %in% c("agriculture", "commercial/institutional", "groundwater wells", "other")) %>% 
  
  # Plot, color by water type, and linetype by produced or delivered 
  ggplot(aes(x = start_date, y = quantity_acre_feet, color = water_type, linetype = water_produced_or_delivered)) +
  geom_line() +
  labs(x = "Date",
       y = "Quantity (Acre-Feet)") +
  theme_minimal()
```

### Function for NA values for all produced/delivered

```{r}
hist_na_function <- function(id, date){
  
  # Calculating NAs 
  hist_na <- hist_filt_function(id, date) %>% 
    
    # Filter out total b/c we created this, not a part of the original data
    # Don't want to include it in our calculation 
    filter(water_type != "total") %>% 
    group_by(water_produced_or_delivered) %>% 
    
    # Calculate total observations, total NAs, and NA percentage 
    summarize(total_obs = n(),
              total_na = sum(is.na(quantity_acre_feet)),
              na_percentage = total_na / total_obs * 100)
  
  return(hist_na)
}

hist_na_function(1068, c("2013-01", "2013-05"))
```

### NA values for all produced/delivered

```{r}
# Calculating NAs 
hist_goleta_na <- hist_goleta %>% 
  
  # Filter out total b/c we created this, not a part of the original data
  # Don't want to include it in our calculation 
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered) %>% 
  
  # Calculate total observations, total NAs, and NA percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(quantity_acre_feet)),
            na_percentage = total_na / total_obs * 100)
```

### Function for total values for produced/delivered

```{r}
hist_values_function <- function(id, date){
  # Calculating total values for "total produced/delivered"
  hist_values <- hist_filt_function(id, date) %>% 
    
    # Filter out "total" as its not a part of the original data
    filter(water_type != "total") %>% 
    group_by(water_produced_or_delivered) %>% 
    
    # Summing quantity acre-feet for total 
    summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE))
  
  return(hist_values)
}

hist_values_function(1068, c("2013-01", "2013-05"))
```

### Total values for all produced/delivered

```{r}
# Calculating total values for "total produced/delivered"
hist_goleta_values <- hist_goleta %>% 
  
  # Filter out "total" as its not a part of the original data
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered) %>% 
  
  # Summing quantity acre-feet for total 
  summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE))
```

### Function for NAs for specific water types

```{r}
hist_na_specific_function <- function(id, date, type){
  
  hist_na_specific <- hist_filt_function(id, date) %>% 
    
    # Filter out total b/c we created this, not a part of the original data
    # Don't want to include it in our calculation 
    filter(water_type != "total") %>% 
    group_by(water_produced_or_delivered, water_type) %>% 
    
    # Calculate total observations, total NAs, and NA percentage 
    summarize(total_obs = n(),
              total_na = sum(is.na(quantity_acre_feet)),
              na_percentage = total_na / total_obs * 100) %>% 
    
    # Filter to only the variables we want 
    # In this case these are randomly selected
    filter(water_type %in% type)
  
  return(hist_na_specific)
}

hist_na_specific_function(1068, c("2013-01", "2013-05"), c("agriculture", "surface water"))
```

### NA Values for Specific water type

```{r}
hist_goleta_na2 <- hist_goleta %>% 
  
  # Filter out total b/c we created this, not a part of the original data
  # Don't want to include it in our calculation 
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered, water_type) %>% 
  
  # Calculate total observations, total NAs, and NA percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(quantity_acre_feet)),
            na_percentage = total_na / total_obs * 100) %>% 
  
  # Filter to only the variables we want 
  # In this case these are randomly selected
  filter(water_type %in% c("agriculture", "commercial/institutional", "groundwater wells", "other"))
```

### Function for total Values for Specific water type

```{r}
hist_values_specific <- function(id, type, date){
  
  # Calculating values for specific water types chosen above 
  hist_values_specific <- hist_filt_function(id, date) %>% 
    
    # Filter out "total" as it's not a part of the original data
    filter(water_type != "total") %>% 
    group_by(water_produced_or_delivered, water_type) %>% 
    
    # Calculating totals and then filtered to chosen water types 
    summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE)) %>% 
    filter(water_type %in% type)
  
  return(hist_values_specific)
}

hist_values_specific(1068, c("recycled", "agriculture", "surface water"), c("2013-01", "2013-05"))
```

### Total Values for Specific water type

THIS GIVES ME THE TOTAL VALUES FOR EACH WATER TYPE FOR EVERY YEAR. THE GOAL IS WHEN WE CHANGE THE DATE RANGE, THESE VALUES WILL CHANGE WITH IT

```{r}
# Calculating values for specific water types chosen above 
hist_goleta_values2 <- hist_goleta %>% 
  
  # Filter out "total" as it's not a part of the original data
  filter(water_type != "total") %>% 
  group_by(water_produced_or_delivered, water_type) %>% 
  
  # Calculating totals and then filtered to chosen water types 
  summarize(total_value = sum(quantity_acre_feet, na.rm = TRUE)) %>% 
  filter(water_type %in% c("agriculture", "recycled", "surface water"))
```

## Monthly Water Shortage DF

#### Filter to Alameda, WE DON'T HAVE GOLETA WATER DISTRICT IN THIS DATASET

```{r}
# Filter to Alameda 
monthly_alameda <- monthly_water_outlook %>% 
  filter(org_id == 23) %>% 
  
  mutate(year_month = format(forecast_start_date, "%Y-%m")) %>% 
  
  filter(year_month %in% c("2024-07", "2024-08", "2024-09"))
```

### Function to filter Monthly water shortage df

```{r}
monthly_filter <- function(id, date){
  
   # If date arguemnt has 2 values, assume it's a start/end range and expand it
  if (length(date) == 2) {
    date <- seq(
      from = lubridate::ymd(paste0(date[1], "-01")), # Converts into Date type
      
      to   = lubridate::ymd(paste0(date[2], "-01")), # Converts into Date type
      
      by   = "1 month" # sequences by month 
    ) %>% format("%Y-%m") # Reformats back into year and month, same as input values
  }
  
  # Filter to org_id
  monthly_filter <- monthly_water_outlook %>% 
    filter(org_id == id) %>% 
    
     # Create new forecast year column
    mutate(year_month = format(forecast_start_date, "%Y-%m")) %>% 
    
    filter(year_month %in% date)
  
  return(monthly_filter)
}

View(monthly_filter(23, c("2024-07", "2024-09")))
```

### Function for bar plot creation

```{r}
monthly_plot_function <- function(id, date){
  
  monthly_plot <- monthly_filter(id, date) %>% 
  
  # Filter out annual reports, interested in monthly metrics
  filter(is_annual == "FALSE") %>%
  
  # Pivot longer shortage surplus, benefit demand reduction and benefit supply aug columns
  # Want information in one column for easier access when plotting
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Plot data 
  ggplot(aes(x = forecast_start_date, y = acre_feet, fill = use_supply_aug_red)) + 
  geom_col(position = "dodge") +
  labs(x = "Date",
       y = "Acre-Feet",
       fill = element_blank()) +
  
  # Changing labels for graph representation 
  scale_fill_discrete(labels = c("Demand Reduction", "Supply Augmentation", "Shortage/Surplus")) +
  theme_minimal()
  
  return(monthly_plot)
  
}

monthly_plot_function(23, c("2024-07", "2024-09"))
```

### Bar plot for shortage percentage

```{r}
monthly_alameda %>% 
  
  # Filter out annual reports, interested in monthly metrics
  filter(is_annual == "FALSE") %>%
  
  # Pivot longer shortage surplus, benefit demand reduction and benefit supply aug columns
  # Want information in one column for easier access when plotting
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Plot data 
  ggplot(aes(x = forecast_start_date, y = acre_feet, fill = use_supply_aug_red)) + 
  geom_col(position = "dodge") +
  labs(x = "Date",
       y = "Acre-Feet",
       fill = element_blank()) +
  
  # Changing labels for graph representation 
  scale_fill_discrete(labels = c("Demand Reduction", "Supply Augmentation", "Shortage/Surplus")) +
  theme_minimal()
  
```

### Total NA values for Short/Sur, Reduction, Supply Aug

```{r}
# Calculate alameda NAs for dashboard 
monthly_alameda_na <- monthly_alameda %>% 
  
  # Pivoting columns for easier computation 
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Group by new pivoted column 
  group_by(use_supply_aug_red) %>% 
  
  # Summarizing total observations, total NAs, and NA percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(acre_feet)),
            na_percentage = total_na / total_obs * 100)
```

### Function for total NA values

```{r}
monthly_na_function <- function(id, date){
  
  # Calculate alameda NAs for dashboard 
  monthly_na <- monthly_filter(id, date) %>% 
    
    # Pivoting columns for easier computation 
    pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
                 names_to = "use_supply_aug_red",
                 values_to = "acre_feet") %>% 
    
    # Group by new pivoted column 
    group_by(use_supply_aug_red) %>% 
    
    # Summarizing total observations, total NAs, and NA percentage 
    summarize(total_obs = n(),
              total_na = sum(is.na(acre_feet)),
              na_percentage = total_na / total_obs * 100)
  
  return(monthly_na)
}

monthly_na_function(23, c("2024-07", "2024-09"))
```

### Function for total values

```{r}
monthly_values_function <- function(id, date){
  
  # Calculate total values 
  monthly_values <- monthly_filter(id, date) %>% 
    
    # Pivot columns for easier computation 
    pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
                 names_to = "use_supply_aug_red",
                 values_to = "acre_feet") %>% 
    
    # Group by new column and summarize total acre-feet
    group_by(use_supply_aug_red) %>% 
    summarize(total = sum(acre_feet, na.rm = TRUE))
  
  return(monthly_values)
}

monthly_values_function(23, c("2024-07", "2024-09"))

```

### Total values for Short/sur, reduction, supply aug

```{r}

# Calculate total values 
monthly_alameda_values <- monthly_alameda %>% 
  
  # Pivot columns for easier computation 
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Group by new column and summarize total acre-feet
  group_by(use_supply_aug_red) %>% 
  summarize(total = sum(acre_feet, na.rm = TRUE))

```

### Number of months the data is present for values above

```{r}
monthly_alameda_months <- monthly_alameda %>% 
  
  # Pivot columns for easier computation
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
  
  # Remove total annual observations
  filter(is_annual == FALSE,
         
  # Filter where observations not = 0 
         acre_feet != 0) %>% 
  
  # Group by new column and summarize total acre-feet
  group_by(use_supply_aug_red) %>% 
  summarize(num_months = n())
```

### Function for number of months the data is present

```{r}
monthly_months_function <- function(id, date){
  
  monthly_months <- monthly_filter(id, date) %>% 
  
  # Pivot columns for easier computation
  pivot_longer(cols = c(shortage_surplus_acre_feet, starts_with("benefit")),
               names_to = "use_supply_aug_red",
               values_to = "acre_feet") %>% 
    
    # Remove total annual observations
    filter(is_annual == FALSE,
           
           # Filter where observations not = 0 
           acre_feet != 0) %>% 
    
    # Group by new column and summarize total acre-feet
    group_by(use_supply_aug_red) %>% 
    summarize(num_months = n())
  
  return(monthly_months)
}

monthly_months_function(23, c("2024-07", "2024-09"))
```

## Actual Water Shortage Level DF

#### Filter to Goleta

```{r}
# Filter water shortage to Goleta 
shortage_goleta <- actual_shortage %>% 
  filter(org_id == 1068) %>% 
  
  # Create a month_year column
  mutate(month_year = format(start_date, "%Y-%m")) %>% 

  # Filter to only 2022 for our Dashboard Mockup, need to change for function making 
  filter(month_year %in% c("2022-03", "2022-04", "2022-05"))
```

### Function for actual water shortage filter

```{r}
actual_filter_function <- function(id, date){
  
  # If date arguemnt has 2 values, assume it's a start/end range and expand it
  if (length(date) == 2) {
    date <- seq(
      from = lubridate::ymd(paste0(date[1], "-01")), # Convert to Date type
      
      to   = lubridate::ymd(paste0(date[2], "-01")), # Convert to Date type
      
      by   = "1 month" # Sequence by month
      
    ) %>% format("%Y-%m") # Format back to Year and month, same as original input
  }
  
  
  # Filter water shortage to Goleta 
  actual_filter <- actual_shortage %>% 
    filter(org_id == id) %>% 
    
    mutate(year_month = format(start_date, "%Y-%m")) %>% 
    
    filter(year_month %in% date)
  
  return(actual_filter)
}

View(actual_filter_function(1068, c("2022-03", "2022-05")))
```

### Function for bar plot

NEED TO FIGURE OUT THIS FUNCTION

```{r}
actual_plot_function <- function(id, date){
  
  # Plot Water shortage levels for Goleta 
  ggplot(actual_filter_function(id, date), aes(x = date, y = state_standard_shortage_level)) +
    geom_col(fill = "orange3") +
    scale_x_discrete(
      
      # Create breaks for 12 months
      breaks = 1:12, 
      
      # Change labels from numbers into month abbreviations
      labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
                 "July", "Aug", "Sep", "Oct", "Nov", "Dec")) +
    
    labs(x = "Month",
         y = "Shortage Level") +
    theme_minimal()
  
  
}

actual_plot_function(23, c("2022-03", "2022-05"))
```

#### Bar Plot of shortage

```{r}
# Plot Water shortage levels for Goleta 
ggplot(shortage_goleta, aes(x = month, y = state_standard_shortage_level)) +
  geom_col(fill = "orange3") +
  scale_x_continuous(
    
    # Create breaks for 12 months
    breaks = 1:12, 
    
    # Change labels from numbers into month abbreviations
    labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
               "July", "Aug", "Sep", "Oct", "Nov", "Dec")) +
  
  labs(x = "Month",
       y = "Shortage Level") +
  theme_minimal()
```

```{r}

##### THIS IS IF WE DO A DOT PLOT, NEED TO MAKE CHANGES AND DESIGNATE COLORS FOR LEVELS ######
ggplot(shortage_goleta, aes(x = month, y = state_standard_shortage_level)) +
  geom_point() +
  scale_x_continuous(
    breaks = 1:12,
    labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
               "July", "Aug", "Sep", "Oct", "Nov", "Dec")
  ) +
  labs(x = "Month",
       y = "Shortage Level") +
  theme_minimal()
```

### Function for NAs

```{r}
actual_na_function <- function(id, date){
  # Calculating water shortage level NAs
  actual_na <- actual_filter_function(id, date) %>% 
    
    # Summarize total observations, total NAs, NA Percentage 
    summarize(total_obs = n(),
              total_na = sum(is.na(state_standard_shortage_level)),
              na_percentage = total_na / total_obs * 100)
  
  
  return(actual_na)
  
}

actual_na_function(1068)
```

### NAs for shortage

```{r}
# Calculating water shortage level NAs
shortage_goleta_na <- shortage_goleta %>% 
  
  # Summarize total observations, total NAs, NA Percentage 
  summarize(total_obs = n(),
            total_na = sum(is.na(state_standard_shortage_level)),
            na_percentage = total_na / total_obs * 100)
```

### Function for average values

```{r}
actual_values_function <- function(id, date){
  
  # Calculating total values
  actual_values <- actual_filter_function(id, date) %>% 
  summarize(average = mean(state_standard_shortage_level, na.rm = TRUE))
  
  return(actual_values)
}

actual_values_function(1068)
```

### Average Values for shortage

```{r}
# Calculating total values
shortage_goleta_values <- shortage_goleta %>% 
  summarize(average = mean(state_standard_shortage_level, na.rm = TRUE))
```
